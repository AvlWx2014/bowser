[project]
name = "bowser"
version = "1.0.0.dev1"
description = "A side kick application that runs as a sidecar in your Pod and warehouses your data."
authors = [
    {name = "Ryan Smith", email = "ryan.d.smith.106@gmail.com"},
]
dependencies = [
    "click>=8.1.7",
    "pydantic>=2.6.1",
    "attrs>=23.2.0",
    "reactivex>=4.0.4",
]
requires-python = ">=3.11"
readme = "README.md"
license = { text = "MIT" }

[project.optional-dependencies]
aws = [
    "boto3>=1.34.34",
    "moto[s3]>=5.0.1",
]

[project.scripts]
bowser = "bowser.cli:bowser"

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.pdm]
distribution = true

[tool.pdm.dev-dependencies]
dev = [
    "black>=24.1.1",
    "isort>=5.13.2",
    "mypy>=1.8.0",
    "bandit>=1.7.7",
    "ruff>=0.2.0",
    "boto3-stubs[essential]>=1.34.37",
]
test = [
    "pytest>=8.0.0",
    "pytest-cov>=4.1.0",
    "PyHamcrest>=2.1.0",
]

[tool.pdm.scripts]
# testing
test = "pytest"

# static analysis
check-formatting = { composite = [
    "isort --check --settings-path ./pyproject.toml src/ tests/",
    "black --check src/ tests/"
] }
format = { composite = [
    "isort --settings-path ./pyproject.toml src/ tests/",
    "black src/ tests/"
] }
lint-check = "ruff check --config ./pyproject.toml ."
lint-fix = "ruff check --config ./pyproject.toml . --fix"
type-check = "mypy --config-file ./pyproject.toml src/"
security-scan = "bandit -rc pyproject.toml src/ tests/"

[tool.isort]
profile = "black"
py_version = 311

[tool.bandit]
exclude_dirs = [".venv", ".*_cache", ".pdm-build", "docs", "htmlcov", ".gitlab"]
skips = ["B404"]

[tool.mypy]
python_version = "3.11"
exclude = '\.venv\.*'
disallow_incomplete_defs = true
disallow_untyped_calls = true
disallow_untyped_defs = false
check_untyped_defs = true
disallow_subclassing_any = true
strict_optional = true
no_implicit_optional = true
disallow_any_generics = true
disallow_any_unimported = true
warn_redundant_casts = true
warn_unused_configs = true
warn_no_return = true
warn_unreachable = true
show_traceback = true

[tool.pytest.ini_options]
addopts = [
    "--cov=bowser",
    "--cov-report=html",
    "--cov-report=term",
    "--cov-report=xml",
    "--junitxml=junit.xml",
    "--cov-branch"
]
pythonpath = ["src"]
testpaths = ["tests"]

[tool.coverage.report]
exclude_also = [
    '\.\.\.'
]

# adapted from the default ruff config outlined in the ruff docs on configuring ruff
# https://docs.astral.sh/ruff/configuration/
[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "build",
    "dist",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.11
target-version = "py311"

[tool.ruff.lint]
extend-select = [
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "F", # pyflakes
    "FA", # flake8-future-annotations
    "FBT", #flake8-boolean-trap
    "G", # flake8-logging-format
    "N", # pep8-naming
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PGH", # pygrep-hooks
    "PTH", # flake8-pathlib
    "RET", # flake8-return
    "RUF", # ruff
    "SIM", # flake8-simplify
    "UP", # pyupgrade
    "W", # pycodestyle
    "YTT", # flake8-2020
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]

[tool.ruff.lint.pydocstyle]
convention = "google"